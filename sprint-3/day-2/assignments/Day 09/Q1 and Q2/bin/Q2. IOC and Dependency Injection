Q2/- Explain about IOC and Dependency Injection.

Answer-

IOC (Inversion Of Control)-
-In general, when a class depends on another class then the dependent class creates
the object of its dependency class directly, and then uses(call) its methods, it is
called the dependency object created in the main control.
-But if some external entity is taking care of creating the dependency object then we
say that control is inverted to some external entity, this is called Inversion Of 
Control (IOC)
-The IOC is a design principle that is purely conceptual, in which an external entity
provides the dependencies to the application components instead of hard coding them
in the component class.

-----------------------------------------------------------------------------------

Dependency Injection-
-The main idea in Dependency Injection is that you don't have to create your objects
but you just have to describe how they should be created.
-The components and services need not be connected by us in the code directly. We
have to describe which services are needed by which components in the configuration
file. The IOC container present in Spring will wire them up together.

-In Java, the 2 major ways of achieving dependency injection are-
1.Constructor injection- Here, the IoC container invokes the class constructor
with a number of arguments where each argument represents a dependency on the other
class.
2.Setter injection- Here, the Spring container calls the setter methods on the beans
after invoking a no-argument static factory method or default constructor to instantiate
the bean.

------------------------------------------------------------------------------------